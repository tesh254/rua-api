generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id               String                   @id @default(uuid())
  email            String                   @unique
  username         String                   @unique
  in_app_email     String
  account_avatar   String?
  auth_type        String
  password         String?
  last_logged_in   String?
  is_onboarded     Boolean?                 @default(false)
  has_accepted_tos Boolean                  @default(true)
  plan             Plan?
  subscriptions    AccountOnSubscriptions[]
  categories       Category[]
  feed             Feed[]
  highlights       Highlight[]
  created_at       DateTime?                 @default(now())
  updated_at       DateTime?                 @updatedAt
}

model Plan {
  id                             String   @id @default(uuid())
  name                           String
  plan_slug                      String
  price                          Float
  price_currency                 String
  price_start_date               String?
  price_end_date                 String?
  is_expired                     Boolean  @default(true)
  subscriber                     Account  @relation(fields: [subscriber_id], references: [id])
  paddle_customer_id             String?
  cancel_url                     String?
  checkout_id                    String?
  last_event_time                String?
  paddle_plan_id                 String?
  unit_price                     Float?
  update_payment_url             String?
  paddle_user_id                 String?
  transaction_status             String?
  next_bill_date                 String?
  last_receipt_url               String?
  paddle_subscription_payment_id String?
  plan_status                    String?
  receipt_url                    String?
  subscriber_id                  String   @unique
  created_at                     DateTime? @default(now())
  updated_at                     DateTime? @updatedAt
}

model Subscriptions {
  id              String                   @id @default(uuid())
  source_email    String
  source_name     String?
  platform_domain String
  source_avatar   String?
  subscribers     AccountOnSubscriptions[]
  feed            Feed[]
  created_at      DateTime?                 @default(now())
  updated_at      DateTime?                 @updatedAt
}

model AccountOnSubscriptions {
  id              String        @id @default(uuid())
  account         Account       @relation(fields: [account_id], references: [id])
  account_id      String
  subscription    Subscriptions @relation(fields: [subscription_id], references: [id])
  subscription_id String
  category        Category?     @relation(fields: [category_id], references: [id])
  category_id     String?
  is_unsubscribed Boolean       @default(true)
  created_at      DateTime?      @default(now())
  updated_at      DateTime?      @updatedAt
}

model Feed {
  id              String         @id @default(uuid())
  title           String
  feed_hosted_url String
  is_read         Boolean
  is_hidden       Boolean
  account         Account?       @relation(fields: [account_id], references: [id])
  account_id      String?
  higlights       Highlight[]
  subscription    Subscriptions? @relation(fields: [subscription_id], references: [id])
  subscription_id String?
  created_at      DateTime?       @default(now())
  updated_at      DateTime?       @updatedAt
}

model Category {
  id           String                   @id @default(uuid())
  name         String
  name_slug    String
  account      Account                  @relation(fields: [account_id], references: [id])
  account_id   String
  account_subs AccountOnSubscriptions[]
  created_at   DateTime?                 @default(now())
  updated_at   DateTime?                 @updatedAt
}

model Highlight {
  id String @id @default(uuid())

  feed           Feed     @relation(fields: [feed_id], references: [id])
  feed_id        String
  highlight_text String
  highlight_html String
  account        Account  @relation(fields: [account_id], references: [id])
  account_id     String
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt
}
